CREATE TABLE IF NOT EXISTS Role (
    id INT AUTO_INCREMENT,
    name VARCHAR(30) NOT NULL,
    CONSTRAINT role_id_pk PRIMARY KEY (id),
    CONSTRAINT role_name_uk UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS Permission (
    id INT AUTO_INCREMENT, 
    name VARCHAR(60),
    CONSTRAINT permission_id_pk PRIMARY KEY (id),
    CONSTRAINT permission_name_uk UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS PermissionRole (
    id INT AUTO_INCREMENT,
    role_id INT,
    permission_id INT,
    CONSTRAINT permission_role_id_pk PRIMARY KEY (id),
    CONSTRAINT permission_role_role_fk FOREIGN KEY (role_id) 
        REFERENCES Role (id),
    CONSTRAINT permission_role_permission_fk FOREIGN KEY (permission_id)
        REFERENCES Permission (id),
    CONSTRAINT permission_role_uk UNIQUE (role_id, permission_id)    
);

CREATE TABLE IF NOT EXISTS Institution (
    id INT AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    CONSTRAINT institution_id_pk PRIMARY KEY (id),
    CONSTRAINT institution_name_uk UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS Course (
    id INT AUTO_INCREMENT,
    institution_id INT,
    name_program VARCHAR(255) NOT NULL,
    program_type VARCHAR(100),
    level_program VARCHAR(100),
    CONSTRAINT course_id_pk PRIMARY KEY (id),
    CONSTRAINT course_institution_id_fk FOREIGN KEY (institution_id)
        REFERENCES Institution (id)
);

CREATE TABLE IF NOT EXISTS Classroom (
    id INT AUTO_INCREMENT,
    course_id INT,
    number_classroom INT,
    logo VARCHAR(255),    
    CONSTRAINT classroom_id_pk PRIMARY KEY(id),
    CONSTRAINT classroom_course_id_fk FOREIGN KEY (course_id)
        REFERENCES Course (id)
);

CREATE TABLE IF NOT EXISTS IdentificationType (
    id INT AUTO_INCREMENT,
    name VARCHAR(50) NOT NULL,
    CONSTRAINT identificationtype_id_pk PRIMARY KEY (id),
    CONSTRAINT identificationtype_name_uk UNIQUE (name)
);


CREATE TABLE IF NOT EXISTS User (
    id INT AUTO_INCREMENT,
    name VARCHAR(40) NOT NULL,
    last_name VARCHAR(40) NOT NULL,
    identification_type_id INT,  
    identification_number BIGINT,  
    number_phone VARCHAR(15), 
    role_id INT, 
    email VARCHAR(60) NOT NULL,
    password VARCHAR(255) NOT NULL,  
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    CONSTRAINT user_id_pk PRIMARY KEY (id),
    CONSTRAINT user_identification_number_uq UNIQUE (identification_number),
    CONSTRAINT user_email_uq UNIQUE (email),
    CONSTRAINT user_role_id_fk FOREIGN KEY (role_id) 
        REFERENCES Role(id)
);

CREATE TABLE IF NOT EXISTS Attendance (
    id INT AUTO_INCREMENT,
    status BOOLEAN NOT NULL DEFAULT FALSE,
    user_id INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    CONSTRAINT attendance_id_pk PRIMARY KEY (id),
    CONSTRAINT attendance_user_id_fk FOREIGN KEY (user_id)
        REFERENCES User (id)
);

CREATE TABLE IF NOT EXISTS Reason (
    id INT AUTO_INCREMENT,  
    attendance_id INT NOT NULL,
    reason VARCHAR(255) NOT NULL,
    evidence_path VARCHAR(255),  
    CONSTRAINT reason_id_pk PRIMARY KEY (id),
    CONSTRAINT reason_attendance_fk FOREIGN KEY (attendance_id)
        REFERENCES Attendance(id)
);

CREATE TABLE IF NOT EXISTS Enrolled (
    id INT AUTO_INCREMENT,
    classroom_id INT NOT NULL,
    user_id INT NOT NULL,
    representative_main BOOLEAN DEFAULT FALSE,
    representative_alternate BOOLEAN DEFAULT FALSE,
    allowed BOOLEAN NOT NULL DEFAULT FALSE,
    CONSTRAINT enrolled_id_pk PRIMARY KEY (id),
    CONSTRAINT enrolled_user_id_fk FOREIGN KEY (user_id)
        REFERENCES User (id),
    CONSTRAINT enrolled_classroom_id_fk FOREIGN KEY (classroom_id)
        REFERENCES Classroom(id)
);

CREATE TABLE IF NOT EXISTS CleaningLog (
    id INT AUTO_INCREMENT,
    user_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT cleaninglog_id_pk PRIMARY KEY (id),
    CONSTRAINT cleaninglog_user_id_fk FOREIGN KEY (user_id)
        REFERENCES User (id)  
);

CREATE TABLE IF NOT EXISTS Project (
    id INT AUTO_INCREMENT,
    user_id INT NOT NULL,
    classroom_id INT NOT NULL,
    name VARCHAR(255),
    description VARCHAR(255),  
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    CONSTRAINT project_id_pk PRIMARY KEY (id),
    CONSTRAINT project_user_id_fk FOREIGN KEY (user_id)
        REFERENCES User (id),
    CONSTRAINT project_classroom_id_fk FOREIGN KEY (classroom_id)
        REFERENCES Classroom(id)  
);

CREATE TABLE IF NOT EXISTS Task (
    id INT AUTO_INCREMENT,
    project_id INT NOT NULL,
    name VARCHAR(255) NOT NULL,
    files_path VARCHAR(255),
    description VARCHAR(255),
    status BOOLEAN NOT NULL DEFAULT FALSE,    
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,  
    CONSTRAINT task_id_pk PRIMARY KEY (id),
    CONSTRAINT task_project_id_fk FOREIGN KEY (project_id)
        REFERENCES Project (id) 
);

CREATE TABLE IF NOT EXISTS EvidenceTask (
    id INT AUTO_INCREMENT,
    task_id INT,
    user_id INT,
    evidence_path VARCHAR(255), 
    observation VARCHAR(255),
    status BOOLEAN NOT NULL DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    CONSTRAINT evidencetask_id_pk PRIMARY KEY (id),
    CONSTRAINT evidencetask_task_id_fk FOREIGN KEY (task_id) REFERENCES Task(id),
    CONSTRAINT evidencetask_user_id_fk FOREIGN KEY (user_id) REFERENCES User(id)
);

CREATE TABLE IF NOT EXISTS Instructor (
  id INT(10) AUTO_INCREMENT,
  user_id INT NOT NULL,
  classroom_id INT NOT NULL,
  CONSTRAINT instructor_id_pk PRIMARY KEY (id),
  CONSTRAINT instructor_user_id_fk FOREIGN KEY (user_id) REFERENCES User(id),
  CONSTRAINT instructor_classroom_id_fk FOREIGN KEY (classroom_id) REFERENCES Classroom(id),
  CONSTRAINT instructor_user_classroom_uk UNIQUE (user_id, classroom_id)
);

